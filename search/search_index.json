{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pythomata Python implementation of automata theory. Free software: Apache 2.0 Documentation: https://marcofavorito.github.io/pythomata. Dependencies Graphviz For Debian systems, the following commands should work: $ wget http://ftp.it.debian.org/debian/pool/main/g/graphviz/graphviz_2.38.0-17_amd64.deb $ sudo dpkg -i graphviz_2.38.0-1~saucy_amd64.deb $ sudo apt-get install -f Otherwise check the installation guide from the official site . Install Install from master branch: with pip : pip3 install git+https://github.com/sapienza-rl/temprl.git or, clone the repository and install: git clone htts://github.com/sapienza-rl/temprl.git cd temprl pip install . How to use Define an automaton: from pythomata.dfa import DFA alphabet = {\"a\", \"b\", \"c\"} states = {\"s1\", \"s2\", \"s3\"} initial_state = \"s1\" accepting_states = {\"s3\"} transition_function = { \"s1\": { \"b\" : \"s1\", \"a\" : \"s2\" }, \"s2\": { \"a\" : \"s3\", \"b\" : \"s1\" }, \"s3\":{ \"c\" : \"s3\" } } dfa = DFA(states, alphabet, initial_state, accepting_states, transition_function) Test word acceptance: # a word is a list of symbols word = [b, b, b, a, b, c] dfa.accepts(word) # True # without the last symbol c, the final state is not reached dfa.accepts(word[:-1]) # False Operations such as minimization and trimming: dfa_minimized = dfa.minimize() dfa_trimmed = dfa.trim() Print the automata: filepath = \"./my_awesome_automaton\" dfa.minimize().trim().to_dot(filepath) The output in .svg format is the following: Features Basic DFA and NFA support; Algorithms for DFA minimization and trimming; Algorithm for NFA determinization; Print automata in SVG format. Tests To run the tests: tox To run only the code style checks: tox -e flake8 Docs To build the docs: mkdocs build To view documentation in a browser mkdocs serve and then go to http://localhost:8000 License Copyright 2018-2019 Marco Favorito","title":"Home"},{"location":"#pythomata","text":"Python implementation of automata theory. Free software: Apache 2.0 Documentation: https://marcofavorito.github.io/pythomata.","title":"Pythomata"},{"location":"#dependencies","text":"","title":"Dependencies"},{"location":"#graphviz","text":"For Debian systems, the following commands should work: $ wget http://ftp.it.debian.org/debian/pool/main/g/graphviz/graphviz_2.38.0-17_amd64.deb $ sudo dpkg -i graphviz_2.38.0-1~saucy_amd64.deb $ sudo apt-get install -f Otherwise check the installation guide from the official site .","title":"Graphviz"},{"location":"#install","text":"Install from master branch: with pip : pip3 install git+https://github.com/sapienza-rl/temprl.git or, clone the repository and install: git clone htts://github.com/sapienza-rl/temprl.git cd temprl pip install .","title":"Install"},{"location":"#how-to-use","text":"Define an automaton: from pythomata.dfa import DFA alphabet = {\"a\", \"b\", \"c\"} states = {\"s1\", \"s2\", \"s3\"} initial_state = \"s1\" accepting_states = {\"s3\"} transition_function = { \"s1\": { \"b\" : \"s1\", \"a\" : \"s2\" }, \"s2\": { \"a\" : \"s3\", \"b\" : \"s1\" }, \"s3\":{ \"c\" : \"s3\" } } dfa = DFA(states, alphabet, initial_state, accepting_states, transition_function) Test word acceptance: # a word is a list of symbols word = [b, b, b, a, b, c] dfa.accepts(word) # True # without the last symbol c, the final state is not reached dfa.accepts(word[:-1]) # False Operations such as minimization and trimming: dfa_minimized = dfa.minimize() dfa_trimmed = dfa.trim() Print the automata: filepath = \"./my_awesome_automaton\" dfa.minimize().trim().to_dot(filepath) The output in .svg format is the following:","title":"How to use"},{"location":"#features","text":"Basic DFA and NFA support; Algorithms for DFA minimization and trimming; Algorithm for NFA determinization; Print automata in SVG format.","title":"Features"},{"location":"#tests","text":"To run the tests: tox To run only the code style checks: tox -e flake8","title":"Tests"},{"location":"#docs","text":"To build the docs: mkdocs build To view documentation in a browser mkdocs serve and then go to http://localhost:8000","title":"Docs"},{"location":"#license","text":"Copyright 2018-2019 Marco Favorito","title":"License"},{"location":"authors/","text":"Credits Maintainer Marco Favorito < marco.favorito@gmail.com > Contributors None yet. Why not be the first ?","title":"Credits"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#maintainer","text":"Marco Favorito < marco.favorito@gmail.com >","title":"Maintainer"},{"location":"authors/#contributors","text":"None yet. Why not be the first ?","title":"Contributors"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. If you need support, want to report/fix a bug, ask for/implement features, you can check the Issues page or submit a Pull request . For other kinds of feedback, you can contact one of the authors by email.","title":"How to contribute"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. If you need support, want to report/fix a bug, ask for/implement features, you can check the Issues page or submit a Pull request . For other kinds of feedback, you can contact one of the authors by email.","title":"Contributing"}]}