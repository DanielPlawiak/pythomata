{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Pythomata Python implementation of automata theory. Free software: Apache 2.0 Documentation: https://whitemech.github.io/pythomata. Install from PyPI : pip install pythomata pip install pythomata=0.3.0a # for the pre-release. or, from source ( master branch): pip install git+https://github.com/whitemech/pythomata.git or, clone the repository and install: git clone htts://github.com/whitemech/pythomata.git cd pythomata pip install . How to use Define an automaton: from pythomata import SimpleDFA alphabet = {\"a\", \"b\", \"c\"} states = {\"s1\", \"s2\", \"s3\"} initial_state = \"s1\" accepting_states = {\"s3\"} transition_function = { \"s1\": { \"b\" : \"s1\", \"a\" : \"s2\" }, \"s2\": { \"a\" : \"s3\", \"b\" : \"s1\" }, \"s3\":{ \"c\" : \"s3\" } } dfa = SimpleDFA(states, alphabet, initial_state, accepting_states, transition_function) Test word acceptance: # a word is a list of symbols word = \"bbbac\" dfa.accepts(word) # True # without the last symbol c, the final state is not reached dfa.accepts(word[:-1]) # False Operations such as minimization and trimming: dfa_minimized = dfa.minimize() dfa_trimmed = dfa.trim() Translate into a graphviz.Digraph instance: graph = dfa.minimize().trim().to_graphviz() To print the automaton: graph.render(\"path_to_file.svg\") For that you will need to install Graphviz. Please look at their download page for detailed instructions depending on your system. The output looks like the following: Features Basic DFA and NFA support; Algorithms for DFA minimization and trimming; Algorithm for NFA determinization; Translate automata into Graphviz objects. Tests To run the tests: tox To run only the code style checks: tox -e flake8 Docs To build the docs: mkdocs build To view documentation in a browser mkdocs serve and then go to http://localhost:8000 License Copyright 2018-2020 WhiteMech","title":"Home"},{"location":"#pythomata","text":"Python implementation of automata theory. Free software: Apache 2.0 Documentation: https://whitemech.github.io/pythomata.","title":"Pythomata"},{"location":"#install","text":"from PyPI : pip install pythomata pip install pythomata=0.3.0a # for the pre-release. or, from source ( master branch): pip install git+https://github.com/whitemech/pythomata.git or, clone the repository and install: git clone htts://github.com/whitemech/pythomata.git cd pythomata pip install .","title":"Install"},{"location":"#how-to-use","text":"Define an automaton: from pythomata import SimpleDFA alphabet = {\"a\", \"b\", \"c\"} states = {\"s1\", \"s2\", \"s3\"} initial_state = \"s1\" accepting_states = {\"s3\"} transition_function = { \"s1\": { \"b\" : \"s1\", \"a\" : \"s2\" }, \"s2\": { \"a\" : \"s3\", \"b\" : \"s1\" }, \"s3\":{ \"c\" : \"s3\" } } dfa = SimpleDFA(states, alphabet, initial_state, accepting_states, transition_function) Test word acceptance: # a word is a list of symbols word = \"bbbac\" dfa.accepts(word) # True # without the last symbol c, the final state is not reached dfa.accepts(word[:-1]) # False Operations such as minimization and trimming: dfa_minimized = dfa.minimize() dfa_trimmed = dfa.trim() Translate into a graphviz.Digraph instance: graph = dfa.minimize().trim().to_graphviz() To print the automaton: graph.render(\"path_to_file.svg\") For that you will need to install Graphviz. Please look at their download page for detailed instructions depending on your system. The output looks like the following:","title":"How to use"},{"location":"#features","text":"Basic DFA and NFA support; Algorithms for DFA minimization and trimming; Algorithm for NFA determinization; Translate automata into Graphviz objects.","title":"Features"},{"location":"#tests","text":"To run the tests: tox To run only the code style checks: tox -e flake8","title":"Tests"},{"location":"#docs","text":"To build the docs: mkdocs build To view documentation in a browser mkdocs serve and then go to http://localhost:8000","title":"Docs"},{"location":"#license","text":"Copyright 2018-2020 WhiteMech","title":"License"},{"location":"authors/","text":"Credits Maintainers Marco Favorito < marco.favorito@gmail.com > Francesco Fuggitti < francesco.fuggitti@gmail.com > Contributors None yet. Why not be the first ?","title":"Credits"},{"location":"authors/#credits","text":"","title":"Credits"},{"location":"authors/#maintainers","text":"Marco Favorito < marco.favorito@gmail.com > Francesco Fuggitti < francesco.fuggitti@gmail.com >","title":"Maintainers"},{"location":"authors/#contributors","text":"None yet. Why not be the first ?","title":"Contributors"},{"location":"contributing/","text":"Contributing Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. If you need support, want to report/fix a bug, ask for/implement features, you can check the Issues page or submit a Pull request . For other kinds of feedback, you can contact one of the authors by email.","title":"How to contribute"},{"location":"contributing/#contributing","text":"Contributions are welcome, and they are greatly appreciated! Every little bit helps, and credit will always be given. If you need support, want to report/fix a bug, ask for/implement features, you can check the Issues page or submit a Pull request . For other kinds of feedback, you can contact one of the authors by email.","title":"Contributing"}]}